use simple_symbol::Symbol;

#[derive(Clone, Debug, PartialEq, Eq)]
pub enum Token {
    IDENT(Symbol),
    CHARACTER(char),
    INTEGER(i64),
    STRING(String),
    USE, 
    IF,
    WHILE,
    ELSE,
    RETURN,
    LENGTH,
    INT,
    BOOL,
    TRUE,
    FALSE,
    ASSIGN,
    NOT,
    MUL,
    HMUL,
    DIV,
    MOD,
    ADD,
    SUB,
    LE,
    LT,
    GE,
    GT,
    EQ,
    NEQ,
    LAND,
    LOR,
    LPAREN,
    RPAREN,
    LBRACK,
    RBRACK,
    LBRACE,
    RBRACE,
    COLON,
    SEMICOLON,
    COMMA,
    UNDERSCORE,
    EOF,
}

impl std::fmt::Display for Token {
    fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
        | Token::IDENT(s)     => write!(fmt, "{}", s),
        | Token::CHARACTER(c) => write!(fmt, "{}", c),
        | Token::INTEGER(i)   => write!(fmt, "{}", i),
        | Token::STRING(s)    => write!(fmt, "{}", s),
        | Token::USE          => write!(fmt, "use"),
        | Token::IF           => write!(fmt, "if"),
        | Token::WHILE        => write!(fmt, "while"),
        | Token::ELSE         => write!(fmt, "else"),
        | Token::RETURN       => write!(fmt, "return"),
        | Token::LENGTH       => write!(fmt, "length"),
        | Token::INT          => write!(fmt, "int"),
        | Token::BOOL         => write!(fmt, "bool"),
        | Token::TRUE         => write!(fmt, "true"),
        | Token::FALSE        => write!(fmt, "false"),
        | Token::ASSIGN       => write!(fmt, "="),
        | Token::NOT          => write!(fmt, "!"),
        | Token::MUL          => write!(fmt, "*"),
        | Token::HMUL         => write!(fmt, "*>>"),
        | Token::DIV          => write!(fmt, "/"),
        | Token::MOD          => write!(fmt, "%"),
        | Token::ADD          => write!(fmt, "+"),
        | Token::SUB          => write!(fmt, "-"),
        | Token::LE           => write!(fmt, "<="),
        | Token::LT           => write!(fmt, "<"),
        | Token::GE           => write!(fmt, ">="),
        | Token::GT           => write!(fmt, ">"),
        | Token::EQ           => write!(fmt, "=="),
        | Token::NEQ          => write!(fmt, "!="),
        | Token::LAND         => write!(fmt, "&"),
        | Token::LOR          => write!(fmt, "|"),
        | Token::LPAREN       => write!(fmt, "("),
        | Token::RPAREN       => write!(fmt, ")"),
        | Token::LBRACK       => write!(fmt, "{{"),
        | Token::RBRACK       => write!(fmt, "}}"),
        | Token::LBRACE       => write!(fmt, "["),
        | Token::RBRACE       => write!(fmt, "]"),
        | Token::COLON        => write!(fmt, ":"),
        | Token::SEMICOLON    => write!(fmt, ";"),
        | Token::COMMA        => write!(fmt, ","),
        | Token::UNDERSCORE   => write!(fmt, "_"),
        | Token::EOF          => write!(fmt, "EOF"),
        }
    }
}
