use std::cell::Cell;

use crate::data::ast::*;
use crate::data::token::Token;
use crate::error::Error;
use crate::parse;
use crate::data::symbol::Symbol;
use crate::data::span::Point;
use crate::data::span::Span;

grammar;

pub Interface: Interface = {
    <uses: Use*> <items: ItemSignature*> => Interface {
        uses,
        items,
    },
}

Use: Use = {
    <l: @L> "use" <name: Identifier> ";"? <r: @R> => Use { name, span: Span::new(l, r) },
}

ItemSignature: ItemSignature = {
    <class: ClassSignature> => ItemSignature::Class(class),
    <function: FunctionSignature> => ItemSignature::Function(function),
}

ClassSignature: ClassSignature = {
    <l: @L> "class" <name: Identifier> <extends: ("extends" <Identifier>)?> "{" <methods: FunctionSignature*> "}" <r: @R> => {
        ClassSignature {
            name,
            extends,
            methods,
            span: Span::new(l, r),
        }
    },
}

FunctionSignature: FunctionSignature = {
    <l: @L>
        <name: Identifier>
        "("
        <parameters: Comma<NoLength<SingleDeclaration>>>
        ")"
        <returns: (":" <CommaPlus<NoLength<Type>>>)?>
    <r: @R> => {
        FunctionSignature {
            name,
            parameters,
            returns: returns.unwrap_or_default(),
            span: Span::new(l, r)
        }
    }
}

pub Program: Program = {
    <uses: Use*> <items: Item*> => Program {
        uses,
        items,
    },
}

Item: Item = {
    <global: Global> => Item::Global(global),
    <class: Class> => Item::Class(class),
    <function: Function> => Item::Function(function),
}

Global: Global = {
    <declaration: Declaration> ";"? => Global::Declaration(declaration),
    <initialization: Initialization> => Global::Initialization(initialization),
}

Initialization: Initialization = {
    <l: @L>
        <declarations: CommaPlus<Optional<NoLength<SingleDeclaration>>>>
        "="
        <expression: Expression>
        ";"?
    <r: @R> => {
        Initialization {
            declarations,
            expression: Box::new(expression),
            span: Span::new(l, r),
        }
    },
}

Class: Class = {
    <l: @L>
        "class"
        <name: Identifier>
        <extends: ("extends" <Identifier>)?>
        "{"
        <items: ClassItem*>
        "}"
    <r: @R> => {
        Class {
            name,
            extends,
            items,
            span: Span::new(l, r),
        }
    }
}

ClassItem: ClassItem = {
    <declaration: NoLength<Declaration>> => ClassItem::Field(declaration),
    <method: Function> => ClassItem::Method(method),
}

Function: Function = {
    <l: @L>
        <name: Identifier>
        "("
        <parameters: Comma<NoLength<SingleDeclaration>>>
        ")"
        <returns: (":" <CommaPlus<NoLength<Type>>>)?>
        <statements: Block>
    <r: @R> => {
        Function {
            name,
            parameters,
            returns: returns.unwrap_or_default(),
            statements,
            span: Span::new(l, r),
        }
    }
}

ReturnStatement: Statement = {
    <l: @L> "return" <returns: Comma<Expression>> ";"? <r: @R> => {
        Statement::Return(returns, Span::new(l, r))
    }
}

// Refer to http://www.parsifalsoft.com/ifelse.html
NoReturnStatement: Statement = {
    <OpenStatement>,
    <ClosedStatement>,
}

OpenStatement: Statement = {
    // If statement
    <l: @L> "if" <condition: Expression> <if_: NoReturnStatement> <r: @R> => {
        Statement::If(Box::new(condition), Box::new(if_), None, Span::new(l, r))
    },

    // If-else statement
    <l: @L> "if" <condition: Expression> <if_: ClosedStatement> "else" <else_: OpenStatement> <r: @R> => {
        Statement::If(Box::new(condition), Box::new(if_), Some(Box::new(else_)), Span::new(l, r))
    },
}

ClosedStatement: Statement = {
    // If-else statement
    <l: @L> "if" <condition: Expression> <if_: ClosedStatement> "else" <else_: ClosedStatement> <r: @R> => {
        Statement::If(Box::new(condition), Box::new(if_), Some(Box::new(else_)), Span::new(l, r))
    },

    // Procedure call
    <call: Call> ";"? => Statement::Call(call),

    // Declarations
    <l: @L> <declaration: Declaration> ";"? <r: @R> => Statement::Declaration(Box::new(declaration), Span::new(l, r)),

    // Single assignment
    <l: @L> <lhs: LValue> "=" <expression: Expression> ";"? <r: @R> => {
        Statement::Assignment(Box::new(lhs), Box::new(expression), Span::new(l, r))
    },

    <initialization: Initialization> => Statement::Initialization(initialization),

    // While statement
    <l: @L> "while" <condition: Expression> <statements: ClosedStatement> <r: @R> => {
        Statement::While(Do::No, Box::new(condition), Box::new(statements), Span::new(l, r))
    },

    // Do while statement
    <l: @L> "do" <statements: NoReturnStatement> "while" <condition: Expression> <r: @R> => {
        Statement::While(Do::Yes, Box::new(condition), Box::new(statements), Span::new(l, r))
    },

    // Break statement
    <l: @L> "break" ";"? <r: @R> => {
        Statement::Break(Span::new(l, r))
    },

    <Block> ";"?,
}

Block: Statement = {
    <l: @L> "{" <statements: NoReturnStatement*> <_return: ReturnStatement?> "}" <r: @R> => {
        let mut statements = statements;

        if let Some(_return) = _return {
            statements.push(_return);
        }

        Statement::Sequence(statements, Span::new(l, r))
    },
}

Call: Call = {
    <l: @L> <function: NoCallLValue> "(" <arguments: Comma<Expression>> ")" <r: @R> => {
        Call { function: Box::new(function), arguments, span: Span::new(l, r) }
    },
}

LValue: Expression = {
    <l: @L> <function: NoCallLValue> "(" <arguments: Comma<Expression>> ")" <r: @R> => {
        Expression::Call(Call { function: Box::new(function), arguments, span: Span::new(l, r) })
    },
    <NoCallLValue>,
}

NoCallLValue: Expression = {
    <l: @L> "null" <r: @R> => Expression::Null(Span::new(l, r)),
    <l: @L> "this" <r: @R> => Expression::This(Span::new(l, r)),
    <l: @L> "new" <class: Identifier> <r: @R> => Expression::New(class, Span::new(l, r)),
    <variable: Identifier> => Expression::Variable(variable),
    <l: @L> <array: LValue> "[" <index: Expression> "]" <r: @R> => {
        Expression::Index(Box::new(array), Box::new(index), Span::new(l, r))
    },
    <l: @L> <expression: LValue> "." <field: Identifier> <r: @R> => {
        Expression::Dot(Cell::new(None), Box::new(expression), field, Span::new(l, r))
    },
}

Optional<T>: Option<T> = {
    "_" => None,
    <node: T> => Some(node),
}

// Note: this relies on duck typing to be generic over `Type` and `SingleDeclaration`.
//
// We need this runtime workaround because it's otherwise difficult to distinguish
// the single initialization and declaration cases purely in the grammar. Consider
// the following sequence of tokens:
//
// ```text
// x: int
// ```
//
// Were we to keep a separate nonterminal for types without array lengths, it would
// conflict with the type with array lengths.
NoLength<T>: T = {
    <node: T> =>? {
        match node.has_length() {
            false => Ok(node),
            true => Err(parse::Error::Array(node.span()).into()),
        }
    }
}

Declaration: Declaration = {
    <multiple: MultipleDeclaration> => Declaration::Multiple(multiple),
    <single: SingleDeclaration> => Declaration::Single(single),
}

MultipleDeclaration: MultipleDeclaration = {
    <l: @L> <head: Identifier> "," <tail: CommaPlus<Identifier>> ":" <type_: Type> <r: @R> => {
        let mut names = tail;
        names.insert(0, head);
        MultipleDeclaration::new(names, type_, Span::new(l, r))
    }
}

SingleDeclaration: SingleDeclaration = {
    <l: @L> <name: Identifier> ":" <type_: Type> <r: @R> => {
        SingleDeclaration::new(name, type_, Span::new(l, r))
    }
}

Type: Type = {
    <BaseType>,
    <l: @L> <type_: BaseType> <arrays: ArrayType+> =>? {
        let mut type_ = type_;
        let mut seen = None;
        for (length, r) in arrays.into_iter().rev() {
            match (&length, &mut seen) {
            | (None, Some(span)) => return Err(parse::Error::Length(*span).into()),
            | (Some(length), seen) => *seen = Some(length.span()),
            | _ => (),
            }
            type_ = Type::Array(Box::new(type_), length.map(Box::new), Span::new(l, r));
        }
        Ok(type_)
    },
}

BaseType: Type = {
    <l: @L> "bool" <r: @R> => Type::Bool(Span::new(l, r)),
    <l: @L> "int" <r: @R> => Type::Int(Span::new(l, r)),
    <class: Identifier> => Type::Class(class),
}

ArrayType: (Option<Expression>, Point) = {
    "[" <length: Expression?> "]" <r: @R> => (length, r),
}

Expression: Expression = Or;

Binary<Op, Next>: Expression = {
    <l: @L> <lhs: Binary<Op, Next>> <binary: Op> <rhs: Next> <r: @R> => {
        Expression::Binary(Cell::new(binary), Box::new(lhs), Box::new(rhs), Span::new(l, r))
    },
    <Next>
}

OrOp: Binary = {
    "|" => Binary::Or,
}

Or: Expression = Binary<OrOp, And>;

AndOp: Binary = {
    "&" => Binary::And,
}

And: Expression = Binary<AndOp, Equal>;

EqualOp: Binary = {
    "==" => Binary::Eq,
    "!=" => Binary::Ne,
}

Equal: Expression = Binary<EqualOp, Compare>;

CompareOp: Binary = {
    "<"  => Binary::Lt,
    "<=" => Binary::Le,
    ">=" => Binary::Ge,
    ">"  => Binary::Gt,
}

Compare: Expression = Binary<CompareOp, Add>;

AddOp: Binary = {
    "+" => Binary::Add,
    "-" => Binary::Sub,
}

Add: Expression = Binary<AddOp, Mul>;

MulOp: Binary = {
    "*"   => Binary::Mul,
    "*>>" => Binary::Hul,
    "/"   => Binary::Div,
    "%"   => Binary::Mod,
}

Mul: Expression = Binary<MulOp, Prefix>;

PrefixOp: Unary = {
    "-" => Unary::Neg,
    "!" => Unary::Not,
}

Prefix: Expression = {
    // Hack to support `i64::MIN`.
    //
    // To avoid an ambiguous parse for -INT, we diverge into non-integer
    // and integer branches here.
    <l: @L> "-" <int: INT> <r: @R> =>? {
        let span = Span::new(l, r);
        let mut int = int;
        int.insert(0, '-');
        int.parse::<i64>()
            .map_err(|_| parse::Error::Integer(span))
            .map_err(Into::into)
            .map(|int| Expression::Integer(int, span))
    },
    <l: @L> "-" <expression: NoIntPrefix> <r: @R> => {
        Expression::Unary(Unary::Neg, Box::new(expression), Span::new(l, r))
    },
    <l: @L> "!" <expression: Prefix> <r: @R> => {
        Expression::Unary(Unary::Not, Box::new(expression), Span::new(l, r))
    },
    <Value>
}

NoIntPrefix: Expression = {
    <l: @L> "-" <int: INT> <r: @R> =>? {
        let span = Span::new(l, r);
        let mut int = int;
        int.insert(0, '-');
        int.parse::<i64>()
            .map_err(|_| parse::Error::Integer(span))
            .map_err(Into::into)
            .map(|int| Expression::Integer(int, span))
    },
    <l: @L> "-" <expression: NoIntPrefix> <r: @R> => {
        Expression::Unary(Unary::Neg, Box::new(expression), Span::new(l, r))
    },
    <l: @L> "!" <expression: Prefix> <r: @R> => {
        Expression::Unary(Unary::Not, Box::new(expression), Span::new(l, r))
    },
    <NoIntValue>
}

Value: Expression = {
    NoIntValue,
    <l: @L> <int: INT> <r: @R> =>? {
        let span = Span::new(l, r);
        int.parse::<i64>()
            .map_err(|_| parse::Error::Integer(span))
            .map_err(Into::into)
            .map(|int| Expression::Integer(int, span))
    },
}

NoIntValue: Expression = {
    <LValue>,
    <RValue>,
}

RValue: Expression = {
    <l: @L> "true" <r: @R> => Expression::Boolean(true, Span::new(l, r)),
    <l: @L> "false" <r: @R> => Expression::Boolean(false, Span::new(l, r)),
    <l: @L> <char: CHR> <r: @R> => Expression::Character(char, Span::new(l, r)),
    <l: @L> "length" "(" <argument: Expression> ")" <r: @R> => {
        Expression::Length(Box::new(argument), Span::new(l, r))
    },
    <l: @L> <string: STR> <r: @R> => Expression::String(string, Span::new(l, r)),
    <l: @L> "{" <expressions: Comma<Expression>> ","? "}" <r: @R> => {
        Expression::Array(expressions, Span::new(l, r))
    },
    <l: @L> <expression: RValue> "." <field: Identifier> <r: @R> => {
        Expression::Dot(Cell::new(None), Box::new(expression), field, Span::new(l, r))
    },
    <l: @L> <function: RValue> "(" <arguments: Comma<Expression>> ")" <r: @R> => {
        Expression::Call(Call { function: Box::new(function), arguments, span: Span::new(l, r) })
    },
    <l: @L> <array: RValue> "[" <index: Expression> "]" <r: @R> => {
        Expression::Index(Box::new(array), Box::new(index), Span::new(l, r))
    },
    <l: @L> "(" <expression: Expression> ")" <r: @R> => {
        let mut expression = expression;
        *expression.span_mut() = Span::new(l, r);
        expression
    },
}

#[inline]
Identifier: Identifier = {
    <l: @L> <symbol: ID> <r: @R> => {
        Identifier {
            symbol,
            span: Box::new(Span::new(l, r)),
        }
    }
}

#[inline]
Comma<T>: Vec<T> = {
    <head: T?> <tail: ("," <T>)*> => {
        match head {
        | None => tail,
        | Some(head) => {
            let mut tail = tail;
            tail.insert(0, head);
            tail
        }
        }
    }
}

CommaPlus<T>: Vec<T> = {
    <head: T> <tail: ("," <T>)*> => {
        let mut tail = tail;
        tail.insert(0, head);
        tail
    }
}

extern {
    type Location = Point;
    type Error = Error;

    enum Token {
        ID => Token::Identifier(<Symbol>),
        CHR => Token::Character(<char>),
        INT => Token::Integer(<String>),
        STR => Token::String(<String>),
        "use" => Token::Use,
        "class" => Token::Class,
        "this" => Token::This,
        "new" => Token::New,
        "extends" => Token::Extends,
        "null" => Token::Null,
        "break" => Token::Break,
        "if" => Token::If,
        "do" => Token::Do,
        "while" => Token::While,
        "else" => Token::Else,
        "length" => Token::Length,
        "return" => Token::Return,
        "int" => Token::Int,
        "bool" => Token::Bool,
        "true" => Token::True,
        "false" => Token::False,
        "=" => Token::Assign,
        "!" => Token::Not,
        "*" => Token::Mul,
        "*>>" => Token::Hul,
        "/" => Token::Div,
        "%" => Token::Mod,
        "+" => Token::Add,
        "-" => Token::Sub,
        "<" => Token::Lt,
        "<=" => Token::Le,
        ">=" => Token::Ge,
        ">" => Token::Gt,
        "==" => Token::Eq,
        "!=" => Token::Ne,
        "&" => Token::And,
        "|" => Token::Or,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "[" => Token::LBrack,
        "]" => Token::RBrack,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        ":" => Token::Colon,
        ";" => Token::Semicolon,
        "," => Token::Comma,
        "_" => Token::Underscore,
        "." => Token::Period,
    }
}
