use crate::data::ast::*;
use crate::data::token::Token;
use crate::error::Error;
use crate::parse;
use crate::util::symbol::Symbol;
use crate::util::symbol::intern;
use crate::util::span::Point;
use crate::util::span::Span;

grammar;

pub Program: Program = {
    <uses: Use*> <functions: Function+> => Program { uses, functions },
}

pub Interface: Interface = {
    <signatures: Signature+> => Interface { signatures },
}

Use: Use = {
    <l: @L> "use" <name: ID> ";"? <r: @R> => Use { name, span: Span::new(l, r) },
}

Signature: Signature = {
    <l: @L> <name: ID> "(" <parameters: Comma<ArgDeclaration>> ")" <returns: (":" <CommaPlus<ArgType>>)?> <r: @R> => {
        let returns = if let Some(returns) = returns { returns } else { Vec::new() };
        Signature { name, parameters, returns, span: Span::new(l, r) }
    }
}

Function: Function = {
    <l: @L> <name: ID> "(" <parameters: Comma<ArgDeclaration>> ")" <returns: (":" <CommaPlus<ArgType>>)?> <body: Block> <r: @R> => {
        let returns = if let Some(returns) = returns { returns } else { Vec::new() };
        Function { name, parameters, returns, body, span: Span::new(l, r) }
    }
}

ReturnStatement: Statement = {
    <l: @L> "return" <returns: Comma<Expression>> ";"? <r: @R> => {
        Statement::Return(returns, Span::new(l, r))
    }
}

// Refer to http://www.parsifalsoft.com/ifelse.html
NoReturnStatement: Statement = {
    <OpenStatement>,
    <ClosedStatement>,
}

OpenStatement: Statement = {
    // If statement
    <l: @L> "if" <condition: Expression> <pass: NoReturnStatement> <r: @R> => {
        Statement::If(condition, Box::new(pass), None, Span::new(l, r))
    },

    // If-else statement
    <l: @L> "if" <condition: Expression> <pass: ClosedStatement> "else" <fail: OpenStatement> <r: @R> => {
        Statement::If(condition, Box::new(pass), Some(Box::new(fail)), Span::new(l, r))
    },
}

ClosedStatement: Statement = {
    // If-else statement
    <l: @L> "if" <condition: Expression> <pass: ClosedStatement> "else" <fail: ClosedStatement> <r: @R> => {
        Statement::If(condition, Box::new(pass), Some(Box::new(fail)), Span::new(l, r))
    },

    // Procedure call
    <call: Call> ";"? => Statement::Call(call),

    // Single declaration
    <l: @L> <declaration: StatementDeclaration> ";"? <r: @R> => Statement::Declaration(declaration, Span::new(l, r)),

    // Single initialization
    <l: @L> <declaration: StatementDeclaration> <la: @L> "=" <lr: @R> <expression: Expression> ";"? <r: @R> =>? {
        if declaration._type.has_len() { Err(parse::Error::Array(Span::new(la, lr)))? }
        Ok(Statement::Initialization(vec![Some(declaration)], expression, Span::new(l, r)))
    },

    // Single assignment
    <l: @L> <lhs: LValue> "=" <expression: Expression> ";"? <r: @R> => {
        Statement::Assignment(lhs, expression, Span::new(l, r))
    },

    // Multiple initialization
    <l: @L> <declarations: Initialization> "=" <call: Call> ";"? <r: @R> => {
        Statement::Initialization(declarations, Expression::Call(call), Span::new(l, r))
    },

    // While statement
    <l: @L> "while" <condition: Expression> <body: ClosedStatement> <r: @R> => {
        Statement::While(condition, Box::new(body), Span::new(l, r))
    },

    <Block> ";"?,
}

// Either single wildcard or multiple declarations
Initialization: Vec<Option<Declaration>> = {
    "_" => vec![None],
    <head: OptDeclaration> <tail: ("," <OptDeclaration>)+> => {
        let mut tail = tail;
        tail.insert(0, head);
        tail
    }
}

Block: Statement = {
    <l: @L> "{" <statements: NoReturnStatement*> <_return: ReturnStatement?> "}" <r: @R> => {
        let mut statements = statements;
        if let Some(_return) = _return { statements.push(_return); }
        Statement::Sequence(statements, Span::new(l, r))
    },
}

Call: Call = {
    <l: @L> <name: ID> "(" <arguments: Comma<Expression>> ")" <r: @R> => {
        Call { name, arguments, span: Span::new(l, r) }
    },
}

LValue: Expression = {
    <l: @L> <name: ID> <r: @R> => Expression::Variable(name, Span::new(l, r)),
    <l: @L> <call: Call> "[" <index: Expression> "]" <r: @R> => {
        let call = Expression::Call(call);
        Expression::Index(Box::new(call), Box::new(index), Span::new(l, r))
    },
    <l: @L> <array: LValue> "[" <index: Expression> "]" <r: @R> => {
        Expression::Index(Box::new(array), Box::new(index), Span::new(l, r))
    },
}

OptDeclaration: Option<Declaration> = {
    "_" => None,
    <declaration: StatementDeclaration> => Some(declaration),
}

ArgDeclaration: Declaration = {
    <l: @L> <name: ID> ":" <_type: ArgType> <r: @R> => {
        Declaration { name, _type, span: Span::new(l, r) }
    }
}

StatementDeclaration: Declaration = {
    <l: @L> <name: ID> ":" <_type: DeclarationType> <r: @R> => {
        Declaration { name, _type, span: Span::new(l, r) }
    }
}

PrimType: Type = {
    <l: @L> "bool" <r: @R> => Type::Bool(Span::new(l, r)),
    <l: @L> "int"  <r: @R> => Type::Int(Span::new(l, r)),
}

ArgType: Type = {
    <PrimType>,
    <l: @L> <_type: ArgType> "[" "]" <r: @R> => {
        Type::Array(Box::new(_type), None, Span::new(l, r))
    },
}

DeclarationType: Type = {
    <PrimType>,
    <l: @L> <_type: PrimType> <arrays: ArrayType+> =>? {
        let mut _type = _type;
        let mut seen = None;
        for (len, r) in arrays.into_iter().rev() {
            match (&len, &mut seen) {
            | (None, Some(span)) => return Err(parse::Error::Length(*span).into()),
            | (Some(len), seen) => *seen = Some(len.span()),
            | _ => (),
            }
            _type = Type::Array(Box::new(_type), len, Span::new(l, r));
        }
        Ok(_type)
    },
}

ArrayType: (Option<Expression>, Point) = {
    "[" <len: Expression?> "]" <r: @R> => (len, r),
}

Expression: Expression = Or;

Binary<Op, Next>: Expression = {
    <l: @L> <lhs: Binary<Op, Next>> <binary: Op> <rhs: Next> <r: @R> => {
        Expression::Binary(binary, Box::new(lhs), Box::new(rhs), Span::new(l, r))
    },
    <Next>
}

OrOp: Binary = {
    "|" => Binary::Or,
}

Or: Expression = Binary<OrOp, And>;

AndOp: Binary = {
    "&" => Binary::And,
}

And: Expression = Binary<AndOp, Equal>;

EqualOp: Binary = {
    "==" => Binary::Eq,
    "!=" => Binary::Ne,
}

Equal: Expression = Binary<EqualOp, Compare>;

CompareOp: Binary = {
    "<"  => Binary::Lt,
    "<=" => Binary::Le,
    ">=" => Binary::Ge,
    ">"  => Binary::Gt,
}

Compare: Expression = Binary<CompareOp, Add>;

AddOp: Binary = {
    "+" => Binary::Add,
    "-" => Binary::Sub,
}

Add: Expression = Binary<AddOp, Mul>;

MulOp: Binary = {
    "*"   => Binary::Mul,
    "*>>" => Binary::Hul,
    "/"   => Binary::Div,
    "%"   => Binary::Mod,
}

Mul: Expression = Binary<MulOp, Prefix>;

PrefixOp: Unary = {
    "-" => Unary::Neg,
    "!" => Unary::Not,
}

Prefix: Expression = {
    // Hack to support `i64::MIN`.
    //
    // To avoid an ambiguous parse for -INT, we diverge into non-integer
    // and integer branches here.
    <l: @L> "-" <int: INT> <r: @R> =>? {
        let span = Span::new(l, r);
        let mut int = int;
        int.insert(0, '-');
        int.parse::<i64>()
            .map_err(|_| parse::Error::Integer(span))
            .map_err(Into::into)
            .map(|int| Expression::Integer(int, span))
    },
    <l: @L> "-" <expression: NoIntPrefix> <r: @R> => {
        Expression::Unary(Unary::Neg, Box::new(expression), Span::new(l, r))
    },
    <l: @L> "!" <expression: Prefix> <r: @R> => {
        Expression::Unary(Unary::Not, Box::new(expression), Span::new(l, r))
    },
    <Postfix>
}

NoIntPrefix: Expression = {
    <l: @L> "-" <int: INT> <r: @R> =>? {
        let span = Span::new(l, r);
        let mut int = int;
        int.insert(0, '-');
        int.parse::<i64>()
            .map_err(|_| parse::Error::Integer(span))
            .map_err(Into::into)
            .map(|int| Expression::Integer(int, span))
    },
    <l: @L> "-" <expression: NoIntPrefix> <r: @R> => {
        Expression::Unary(Unary::Neg, Box::new(expression), Span::new(l, r))
    },
    <l: @L> "!" <expression: Prefix> <r: @R> => {
        Expression::Unary(Unary::Not, Box::new(expression), Span::new(l, r))
    },
    <NoIntPostfix>
}

Postfix: Expression = {
    <l: @L> <array: Postfix> "[" <index: Expression> "]" <r: @R> => {
        Expression::Index(Box::new(array), Box::new(index), Span::new(l, r))
    },
    <Value>
}

NoIntPostfix: Expression = {
    <l: @L> <array: Postfix> "[" <index: Expression> "]" <r: @R> => {
        Expression::Index(Box::new(array), Box::new(index), Span::new(l, r))
    },
    <NoIntValue>
}

Value: Expression = {
    NoIntValue,
    <l: @L> <int: INT> <r: @R> =>? {
        let span = Span::new(l, r);
        int.parse::<i64>()
            .map_err(|_| parse::Error::Integer(span))
            .map_err(Into::into)
            .map(|int| Expression::Integer(int, span))
    },
}

NoIntValue: Expression = {
    <call: Call> => Expression::Call(call),
    <l: @L> "true" <r: @R> => Expression::Boolean(true, Span::new(l, r)),
    <l: @L> "false" <r: @R> => Expression::Boolean(false, Span::new(l, r)),
    <l: @L> <char: CHR> <r: @R> => Expression::Character(char, Span::new(l, r)),
    <l: @L> <string: STR> <r: @R> => Expression::String(string, Span::new(l, r)),
    <l: @L> <var: ID>  <r: @R> => Expression::Variable(var, Span::new(l, r)),
    <l: @L> "{" <expressions: Comma<Expression>> ","? "}" <r: @R> => {
        Expression::Array(expressions, Span::new(l, r))
    },
    <l: @L> "(" <expression: Expression> ")" <r: @R> => {
        let mut expression = expression;
        *expression.span_mut() = Span::new(l, r);
        expression
    },
    <l: @L> "length" "(" <argument: Expression> ")" <r: @R> => {
        Expression::Call(Call {
            name: intern("length"),
            arguments: vec![argument],
            span: Span::new(l, r)
        })
    },
}

#[inline]
Comma<T>: Vec<T> = {
    <head: T?> <tail: ("," <T>)*> => {
        match head {
        | None => tail,
        | Some(head) => {
            let mut tail = tail;
            tail.insert(0, head);
            tail
        }
        }
    }
}

CommaPlus<T>: Vec<T> = {
    <head: T> <tail: ("," <T>)*> => {
        let mut tail = tail;
        tail.insert(0, head);
        tail
    }
}

extern {
    type Location = Point;
    type Error = Error;

    enum Token {
        ID       => Token::IDENT(<Symbol>),
        CHR      => Token::CHARACTER(<char>),
        INT      => Token::INTEGER(<String>),
        STR      => Token::STRING(<String>),
        "use"    => Token::USE,
        "if"     => Token::IF,
        "while"  => Token::WHILE,
        "else"   => Token::ELSE,
        "length" => Token::LENGTH,
        "return" => Token::RETURN,
        "int"    => Token::INT,
        "bool"   => Token::BOOL,
        "true"   => Token::TRUE,
        "false"  => Token::FALSE,
        "="      => Token::ASSIGN,
        "!"      => Token::NOT,
        "*"      => Token::MUL,
        "*>>"    => Token::HUL,
        "/"      => Token::DIV,
        "%"      => Token::MOD,
        "+"      => Token::ADD,
        "-"      => Token::SUB,
        "<"      => Token::LT,
        "<="     => Token::LE,
        ">="     => Token::GE,
        ">"      => Token::GT,
        "=="     => Token::EQ,
        "!="     => Token::NE,
        "&"      => Token::AND,
        "|"      => Token::OR,
        "("      => Token::LPAREN,
        ")"      => Token::RPAREN,
        "["      => Token::LBRACK,
        "]"      => Token::RBRACK,
        "{"      => Token::LBRACE,
        "}"      => Token::RBRACE,
        ":"      => Token::COLON,
        ";"      => Token::SEMICOLON,
        ","      => Token::COMMA,
        "_"      => Token::UNDERSCORE,
    }
}
