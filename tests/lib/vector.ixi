template class Vector<T> {
    array: T[]
    size': int
    capacity: int

    push(item: T) {
        if size' + 1 > capacity {
            resize()
        }

        array[size'] = item
        size' = size' + 1
    }

    pop(): T {
        size' = size' - 1
        // Note: still considered reachable by GC
        item: T = array[size']
        return item
    }

    get(index: int): T {
        return array[index]
    }

    set(index: int, item: T) {
        array[index] = item
    }

    size(): int {
        return size'
    }

    insert(index: int, item: T) {
        if size' + 1 > capacity {
            resize()
        }

        i: int = size' - 1
        while i >= index {
            array[i + 1] = array[i]
            i = i - 1
        }

        size' = size' + 1
        array[index] = item
    }

    remove(index: int): T {
        item: T = array[index]
        size' = size' - 1

        if index == size' {
            return item
        }

        i: int = index
        while i < size' {
            array[i] = array[i + 1]
            i = i + 1
        }

        return item
    }

    swap_remove(index: int): T {
        swap(index, size' - 1)
        return pop()
    }

    swap(i: int, j: int) {
        if i == j {
            return
        }

        swap: T = array[i]
        array[i] = array[j]
        array[j] = swap
    }

    slice(low: int, high: int): Vector::<T> {
        return new_vector_from_array::<T>(slice_array(low, high))
    }

    slice_array(low: int, high: int): T[] {
        slice': T[high - low]
        i: int = low
        while i < high {
            slice'[i - low] = array[i]
            i = i + 1
        }
        return slice'
    }

    resize() {
        capacity': int = capacity * 2
        if capacity' == 0 {
            capacity' = 1
        }

        double: T[capacity']

        i: int = 0
        while i < size' {
            double[i] = array[i]
            i = i + 1
        }

        capacity = capacity'
        array = double
    }
}

template new_vector<T>(): Vector::<T> {
    vector: Vector::<T> = new Vector::<T>

    array: T[8]

    vector.array = array
    vector.size' = 0
    vector.capacity = 8

    return vector
}

template new_vector_from_array<T>(array: T[]): Vector::<T> {
    vector: Vector::<T> = new Vector::<T>

    vector.array = array
    vector.size' = length(array)
    vector.capacity = vector.size'

    return vector
}
